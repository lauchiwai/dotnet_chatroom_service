name: DotNet Chatroom Deployment

on:
  push:
    branches: [release]  
    paths:
      - 'docker-compose.yml'
      - 'Dockerfile'
      - 'dotnet_chatroom_service/**'

jobs:
  deploy:
    runs-on: [self-hosted, Windows, X64]
    env:
      COMPOSE_PROJECT_NAME: dotnet-chatroom

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: 'src'

    - name: Generate Config Files
      working-directory: ./src/dotnet_chatroom_service
      env:
        DB_SERVER: ${{ secrets.DotNet_DB_Server }}
        DB_NAME: ${{ secrets.DotNet_DB_Name }}
        DB_USER: ${{ secrets.DotNet_DB_User }}
        DB_PASSWORD: ${{ secrets.DotNet_DB_Password }}
        JWT_SECRET: ${{ secrets.DotNet_JWT_SecretKey }}
        JWT_ISSUER: ${{ secrets.DotNet_JWT_Issuer }}
        JWT_AUDIENCE: ${{ secrets.DotNet_JWT_Audience }}
        RBMQ_HOSTNAME: ${{ secrets.RBMQ_HOSTNAME }}
        RBMQ_USERNAME: ${{ secrets.RBMQ_USERNAME }}
        RBMQ_PASSWORD: ${{ secrets.RBMQ_PASSWORD }}
        PY_CHATSERVICE_BASEURL: ${{ secrets.DOTNET_CHATSERVICE_BASEURL }}
      run: |
        # 生成 appsettings.Production.json
        (Get-Content "appsettings.Secrets.json") `
          -replace '\$\{DB_SERVER\}', $env:DB_SERVER `
          -replace '\$\{DB_NAME\}', $env:DB_NAME `
          -replace '\$\{DB_USER\}', $env:DB_USER `
          -replace '\$\{DB_PASSWORD\}', $env:DB_PASSWORD `
          -replace '\$\{JWT_SECRET\}', $env:JWT_SECRET `
          -replace '\$\{JWT_ISSUER\}', $env:JWT_ISSUER `
          -replace '\$\{JWT_AUDIENCE\}', $env:JWT_AUDIENCE `
          -replace '\$\{RBMQ_HOSTNAME\}', $env:RBMQ_HOSTNAME `
          -replace '\$\{RBMQ_USERNAME\}', $env:RBMQ_USERNAME `
          -replace '\$\{RBMQ_PASSWORD\}', $env:RBMQ_PASSWORD `
          -replace '\$\{CHAT_SERVICE_URL\}', $env:PY_CHATSERVICE_BASEURL |
        Set-Content "appsettings.Production.json"

        Get-Content "appsettings.Production.json"
        
    - name: Docker Deployment
      working-directory: ./src
      run: |
        docker compose down
        docker compose up -d --build

    - name: Remove Old Images
      run: |
        $currentTag = "${{ env.IMAGE_TAG }}"
        docker images --filter=reference='${COMPOSE_PROJECT_NAME}_*:*' --format "{{.Repository}}:{{.Tag}}" | 
        Where-Object { 
          $_ -notmatch "${env:COMPOSE_PROJECT_NAME}_*:$currentTag" 
        } | ForEach-Object {
          docker rmi -f $_
        }

    - name: System Cleanup 
      run: |
        docker system prune -f --filter "until=24h"
        docker volume prune -f
